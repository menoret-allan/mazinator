@page "/"
@using MazeGenerator;
@inject IJSRuntime JSRuntime;
@inject IGenerator MazeGenerator;

<h1>Maze me ;)</h1>

<div>

    <p>
        Welcome to my maze generator and solver (#brutForce).
    </p>
    <p>
        It's a little pet project to test out some stuff with property testing and I made a small UI to have a visual.
    </p>
    <p>
        The method of generation has quite an impact on the maze shape.
    </p>

    <p>
        ⚠️: Big maze might take time to generate and solve.
    </p>
</div>

<div>
    <div>
        <p>Change the width: <input type="number" @bind="width" /> size.</p>
        <p>Change the height: <input type="number" @bind="height" /> size.</p>
        <p>Change the number of pixel per case: <input type="number" @bind="numberOfPixelPerCase" /> px/case.</p>
        <p>Millisecond per move: <input type="number" @bind="numberOfMillisecondPerMove" /> ms/move.</p>
        <p>
            Select your path generator algorithm:
            <select id="select-box" @bind="generatorType">
                <option value=@GeneratorType.Random>@GeneratorType.Random.ToString()</option>
                <option value=@GeneratorType.RecursiveSplit>@GeneratorType.RecursiveSplit.ToString()</option>
            </select>
        </p>
        <button disabled="@MazeProcessRunning" @onclick="CreateMaze">Generate</button>
        <button disabled="@SolvingDiseabled" @onclick="SolveMaze">Solve</button>
    </div>
    <canvas id="@canvasId"></canvas>
</div>

@code {
    private int width = 42;
    private int height = 42;
    private int numberOfPixelPerCase = 8;
    private int mazeNumberOfPixelPerCase = 8;
    private int numberOfMillisecondPerMove = 50;
    private readonly string canvasId = "canvasId";
    private GeneratorType generatorType = GeneratorType.RecursiveSplit;
    private MazeGenerator.Maze maze;
    private bool MazeProcessRunning = false;
    private bool MazeCanBeSolve = false;
    private bool SolvingDiseabled => MazeProcessRunning || !MazeCanBeSolve;


    public async Task<bool> CreateMaze()
    {
        if (this.MazeProcessRunning) return false;
        this.MazeProcessRunning = true;

        if (this.width >= 3 && this.height >= 3 && numberOfPixelPerCase >= 1)
        {
            this.maze = MazeGenerator.Generate(this.width, this.height, this.generatorType);

            var width = numberOfPixelPerCase * maze.Dimension.X;
            var height = numberOfPixelPerCase * maze.Dimension.Y;

            var result = await JSRuntime.InvokeAsync<bool>("createCanvas", new { id = this.canvasId, width = width, height = height });

            List<(int x, int y, int width, int height, string color)> mazeMap = new List<(int x, int y, int width, int height, string color)>();
            for (int x = 0; x < maze.Dimension.X; x++)
            {
                for (int y = 0; y < maze.Dimension.Y; y++)
                {
                    mazeMap.Add(
                        (x * this.numberOfPixelPerCase, y * this.numberOfPixelPerCase,
                        this.numberOfPixelPerCase, this.numberOfPixelPerCase,
                        GetColor(maze[y, x])));
                }
            }
            mazeNumberOfPixelPerCase = numberOfPixelPerCase;
            result = await JSRuntime
                .InvokeAsync<bool>("drawMaze",
                new { id = this.canvasId, map = mazeMap.Select(i => new { x = i.x, y = i.y, width = i.width, height = i.height, color = i.color }).ToList() });
            MazeCanBeSolve = true;
        }
        else
        {
            Console.WriteLine("Nope nope nope! height >= 3 && width >= 3 && pixel >= 1");
        }

        MazeProcessRunning = false;
        return true;

    }

    public async Task<bool> SolveMaze()
    {
        if (this.MazeProcessRunning) return false;
        this.MazeProcessRunning = true;
        MazeCanBeSolve = false;
        var solver = new SolverPerfectMaze(this.maze);

        foreach (var next in solver.NextStep())
        {
            if (this.numberOfMillisecondPerMove > 0)
                await Task.Delay(this.numberOfMillisecondPerMove);
            await JSRuntime
                .InvokeAsync<bool>("drawCase",
                new
                {
                    id = this.canvasId,
                    x = next.x * this.mazeNumberOfPixelPerCase,
                    y = next.y * this.mazeNumberOfPixelPerCase,
                    width = this.mazeNumberOfPixelPerCase,
                    height = this.mazeNumberOfPixelPerCase,
                    color = GetColor(next.newState),
                });
        }
        MazeProcessRunning = false;
        return true;
    }

    private string GetColor(CaseType caseType)
    {
        switch (caseType)
        {
            case CaseType.Wall: return "black";
            case CaseType.Path: return "white";
            case CaseType.OnMyWay: return "blue";
            case CaseType.DeadEnd: return "red";
            case CaseType.Debug: return "green";
            case CaseType.Unknow: return "pink";
        }
        return "purple";
    }

    public async Task<bool> Clear_Canvas(string canvasID)
    {
        return await JSRuntime.InvokeAsync<bool>("showMessage");
    }

    public async Task<bool> Stroke_Rect(string canvasID, (int x, int y, int width, int height) transferRectParameters)
    {

        return await JSRuntime.InvokeAsync<bool>("JsInteropClockCanvas.Stroke_Rect", new { canvasID, transferRectParameters });
    }
}
